Hereâ€™s how you can convert the Python code to PowerShell. This PowerShell script will achieve the same goal: reading a domain list from a text file, searching for the domains in the XML file (within the url attribute of <site> tags), and extracting the content of matching <site> elements.

PowerShell Script:

# Function to read domain names from the first file
function Get-DomainNames {
    param (
        [string]$DomainFilePath
    )
    $domains = Get-Content -Path $DomainFilePath
    return $domains
}

# Function to parse XML and search for domain names
function Parse-XMLAndFindDomains {
    param (
        [string]$XmlFilePath,
        [array]$Domains
    )

    # Load the XML file
    [xml]$xmlContent = Get-Content -Path $XmlFilePath

    $matchingSites = @{}

    # Loop through all <site> elements
    foreach ($site in $xmlContent.SelectNodes("//site")) {
        $url = $site.url  # Get the 'url' attribute

        # Check if the URL contains any of the domain names from the list
        foreach ($domain in $Domains) {
            if ($url -like "*$domain*") {
                $matchingSites[$url] = $site.OuterXml
                break  # Exit the loop once a match is found for a domain
            }
        }
    }

    return $matchingSites
}

# Save the results to a file
function Save-Results {
    param (
        [string]$OutputFilePath,
        [hashtable]$MatchingSites
    )

    # Write the results to the output file
    $OutputLines = @()
    foreach ($url in $MatchingSites.Keys) {
        $OutputLines += "URL: $url"
        $OutputLines += "Content:"
        $OutputLines += $MatchingSites[$url]
        $OutputLines += ""
    }

    $OutputLines | Set-Content -Path $OutputFilePath
}

# Main function
function Main {
    param (
        [string]$DomainFilePath,
        [string]$XmlFilePath,
        [string]$OutputFilePath
    )

    # Step 1: Get domain names from the domain file
    $domains = Get-DomainNames -DomainFilePath $DomainFilePath

    # Step 2: Parse the XML and find matching domains
    $matchingSites = Parse-XMLAndFindDomains -XmlFilePath $XmlFilePath -Domains $domains

    # Step 3: Save the results to an output file
    Save-Results -OutputFilePath $OutputFilePath -MatchingSites $matchingSites
}

# Example usage
$domainFilePath = "domain_list.txt"  # Replace with your domain file
$xmlFilePath = "data.xml"            # Replace with your XML file
$outputFilePath = "matching_sites.txt"  # Output file to save the results

Main -DomainFilePath $domainFilePath -XmlFilePath $xmlFilePath -OutputFilePath $outputFilePath

Explanation:

1. Get-DomainNames: Reads the domain names from a text file (domain_list.txt).


2. Parse-XMLAndFindDomains: Loads and parses the XML file (data.xml). It searches for any domain name from the list in the url attribute of the <site> elements and saves matching site content in a hashtable.


3. Save-Results: Writes the extracted XML content related to the matching domains to an output file (matching_sites.txt).


4. Main: Coordinates the process by calling the other functions in sequence.



Usage Example:

Place your domain names in a file called domain_list.txt.

Use your XML file as data.xml.

The output (with matched domain <site> tags) will be saved in matching_sites.txt.


This PowerShell script performs the same logic as the Python script but is written in a PowerShell-friendly manner. Let me know if you need any changes!
