To modify the PowerShell script to exclude any <site> elements that contain the <open-in>MSEdge</open-in> node, we can add an additional check within the Parse-XMLAndFindDomains function. Specifically, before adding a matching site to the result set, the script will inspect each <site> element to see if it contains the <open-in>MSEdge</open-in> tag. If it does, the script will skip that site.

Updated PowerShell Script:

# Function to read domain names from the first file
function Get-DomainNames {
    param (
        [string]$DomainFilePath
    )
    $domains = Get-Content -Path $DomainFilePath
    return $domains
}

# Function to parse XML and search for domain names, excluding those with <open-in>MSEdge</open-in>
function Parse-XMLAndFindDomains {
    param (
        [string]$XmlFilePath,
        [array]$Domains
    )

    # Load the XML file
    [xml]$xmlContent = Get-Content -Path $XmlFilePath

    $matchingSites = @{}

    # Loop through all <site> elements
    foreach ($site in $xmlContent.SelectNodes("//site")) {
        $url = $site.url  # Get the 'url' attribute

        # Check if the URL contains any of the domain names from the list
        foreach ($domain in $Domains) {
            if ($url -like "*$domain*") {

                # Check if the <site> contains <open-in>MSEdge</open-in> and exclude it
                $openInNode = $site."open-in"
                if ($openInNode -eq "MSEdge") {
                    break  # Skip this site if <open-in>MSEdge</open-in> is present
                }

                # If no <open-in>MSEdge</open-in> is found, add the site to the results
                $matchingSites[$url] = $site.OuterXml
                break  # Exit the domain checking loop if a match is found
            }
        }
    }

    return $matchingSites
}

# Save the results to a file
function Save-Results {
    param (
        [string]$OutputFilePath,
        [hashtable]$MatchingSites
    )

    # Write the results to the output file
    $OutputLines = @()
    foreach ($url in $MatchingSites.Keys) {
        $OutputLines += "URL: $url"
        $OutputLines += "Content:"
        $OutputLines += $MatchingSites[$url]
        $OutputLines += ""
    }

    $OutputLines | Set-Content -Path $OutputFilePath
}

# Main function
function Main {
    param (
        [string]$DomainFilePath,
        [string]$XmlFilePath,
        [string]$OutputFilePath
    )

    # Step 1: Get domain names from the domain file
    $domains = Get-DomainNames -DomainFilePath $DomainFilePath

    # Step 2: Parse the XML and find matching domains
    $matchingSites = Parse-XMLAndFindDomains -XmlFilePath $XmlFilePath -Domains $domains

    # Step 3: Save the results to an output file
    Save-Results -OutputFilePath $OutputFilePath -MatchingSites $matchingSites
}

# Example usage
$domainFilePath = "domain_list.txt"  # Replace with your domain file
$xmlFilePath = "data.xml"            # Replace with your XML file
$outputFilePath = "matching_sites.txt"  # Output file to save the results

Main -DomainFilePath $domainFilePath -XmlFilePath $xmlFilePath -OutputFilePath $outputFilePath

Key Changes:

1. Excluding <site> elements with <open-in>MSEdge</open-in>:

Inside the Parse-XMLAndFindDomains function, the script checks for the presence of <open-in>MSEdge</open-in>.

This check is performed using $openInNode = $site."open-in". If this node's value is MSEdge, the loop will break and skip adding this site to



